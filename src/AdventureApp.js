// WebPlayerApp.js - Read-only version for website deployment
import React, { useState, useEffect } from 'react';
import { ChevronRight, Book, Home, Play } from 'lucide-react';

// Import your stories (you'll replace this with exported stories from local editor)
import { webStories } from './webStories.js'; // This file will be generated by your local editor

// ============================================================================
// SIMPLE UI COMPONENTS FOR WEB PLAYER
// ============================================================================

class Button extends React.Component {
  render() {
    const { 
      onClick, 
      children, 
      variant = 'primary', 
      size = 'medium',
      icon: Icon,
      disabled = false,
      className = '',
      title
    } = this.props;

    const baseClasses = 'font-semibold rounded transition-colors flex items-center justify-center space-x-2';
    
    const variantClasses = {
      primary: 'bg-yellow-500 hover:bg-yellow-600 text-black',
      secondary: 'bg-purple-600 hover:bg-purple-700 text-white',
      neutral: 'bg-gray-600 hover:bg-gray-700 text-white'
    };

    const sizeClasses = {
      small: 'py-1 px-2 text-sm',
      medium: 'py-2 px-4',
      large: 'py-3 px-6'
    };

    const classes = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className} ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`;

    return (
      <button 
        onClick={disabled ? undefined : onClick} 
        className={classes}
        title={title}
        disabled={disabled}
      >
        {Icon && <Icon className="w-4 h-4" />}
        <span>{children}</span>
      </button>
    );
  }
}

class Card extends React.Component {
  render() {
    const { children, className = '', onClick } = this.props;
    const baseClasses = 'bg-white/10 backdrop-blur-sm rounded-lg p-6';
    const hoverClasses = onClick ? 'hover:bg-white/20 cursor-pointer' : '';
    
    return (
      <div 
        className={`${baseClasses} ${hoverClasses} ${className}`} 
        onClick={onClick}
      >
        {children}
      </div>
    );
  }
}

class GameChoice extends React.Component {
  render() {
    const { choice, onClick } = this.props;
    
    return (
      <button
        onClick={() => onClick(choice.nextNode)}
        className="w-full bg-purple-600 hover:bg-purple-700 text-white p-4 rounded-lg text-left transition-colors flex items-center justify-between group"
      >
        <span>{choice.text}</span>
        <ChevronRight className="w-5 h-5 opacity-50 group-hover:opacity-100 transition-opacity" />
      </button>
    );
  }
}

// ============================================================================
// WEB PLAYER SCREENS
// ============================================================================

class WebMainMenuScreen extends React.Component {
  render() {
    const { onPlayClick } = this.props;
    
    return (
      <div className="min-h-screen bg-gradient-to-b from-purple-900 to-indigo-900 flex flex-col items-center justify-center p-4">
        <div className="text-center mb-8">
          <Book className="w-16 h-16 text-yellow-400 mx-auto mb-4" />
          <h1 className="text-4xl font-bold text-white mb-2">Adventure Stories</h1>
          <p className="text-purple-200">Choose your own path through interactive adventures</p>
        </div>
        
        <div className="space-y-4 w-full max-w-sm">
          <Button onClick={onPlayClick} icon={Play} size="large" className="w-full">
            Start Adventure
          </Button>
        </div>
        
        <div className="mt-8 text-center">
          <p className="text-purple-300 text-sm">
            ðŸŽ® Select a story and make choices to determine your destiny
          </p>
        </div>
      </div>
    );
  }
}

class WebStorySelectScreen extends React.Component {
  render() {
    const { stories, onBack, onStorySelect } = this.props;
    
    return (
      <div className="min-h-screen bg-gradient-to-b from-purple-900 to-indigo-900 p-4">
        <div className="max-w-4xl mx-auto">
          <div className="flex items-center mb-6">
            <Button onClick={onBack} variant="neutral" icon={Home} size="small" className="mr-4">
            </Button>
            <h1 className="text-3xl font-bold text-white">Choose Your Adventure</h1>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {Object.values(stories).map((story) => (
              <Card key={story.id} className="hover:scale-105 transform transition-transform">
                <h2 className="text-xl font-semibold text-white mb-3">{story.title}</h2>
                <p className="text-purple-200 mb-4 text-sm leading-relaxed">{story.description}</p>
                <div className="flex justify-between items-center mb-4 text-xs text-purple-300">
                  <span>{Object.keys(story.nodes).length} scenes</span>
                  <span>{Object.values(story.nodes).reduce((sum, node) => sum + node.choices.length, 0)} choices</span>
                </div>
                <Button onClick={() => onStorySelect(story.id)} icon={ChevronRight} className="w-full">
                  Begin Story
                </Button>
              </Card>
            ))}
          </div>
          
          {Object.keys(stories).length === 0 && (
            <div className="text-center py-12">
              <Book className="w-16 h-16 text-purple-400 mx-auto mb-4" />
              <h3 className="text-xl text-white mb-2">No stories available</h3>
              <p className="text-purple-300">Stories will appear here once they're added by the administrator.</p>
            </div>
          )}
        </div>
      </div>
    );
  }
}

class WebGameplayScreen extends React.Component {
  getEndingColor() {
    const { currentNode } = this.props;
    if (!currentNode?.isEnding) return '';
    switch (currentNode.endingType) {
      case 'good': return 'border-green-500';
      case 'bad': return 'border-red-500';
      case 'neutral': return 'border-yellow-500';
      default: return 'border-gray-500';
    }
  }

  getEndingText() {
    const { currentNode } = this.props;
    if (!currentNode?.isEnding) return '';
    switch (currentNode.endingType) {
      case 'good': return 'âœ¨ Good Ending';
      case 'bad': return 'ðŸ’€ Bad Ending';
      case 'neutral': return 'ðŸ”® Neutral Ending';
      default: return 'ðŸŽ­ Ending';
    }
  }

  render() {
    const { 
      currentStory, 
      currentNode, 
      gameHistory, 
      onChoice, 
      onRestart, 
      onExit,
      onNewStory 
    } = this.props;

    if (!currentNode) return null;

    return (
      <div className="min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 p-4">
        <div className="max-w-3xl mx-auto">
          <div className="flex justify-between items-center mb-6">
            <h1 className="text-2xl font-bold text-white">{currentStory.title}</h1>
            <div className="flex space-x-2">
              <Button onClick={onRestart} variant="neutral" size="small">
                Restart
              </Button>
              <Button onClick={onExit} variant="neutral" size="small">
                Exit
              </Button>
            </div>
          </div>
          
          <Card className={`mb-6 ${this.getEndingColor()} ${currentNode.isEnding ? 'border-2' : ''}`}>
            <div className="text-white text-lg leading-relaxed mb-6">
              {currentNode.text}
            </div>
            
            {currentNode.isEnding && (
              <div className="text-center mb-6">
                <div className="inline-block bg-white/20 rounded-full px-6 py-3">
                  <span className="text-white font-semibold text-lg">
                    {this.getEndingText()}
                  </span>
                </div>
              </div>
            )}
            
            <div className="space-y-3">
              {currentNode.choices.map((choice, index) => (
                <GameChoice 
                  key={index} 
                  choice={choice} 
                  onClick={onChoice}
                />
              ))}
              
              {currentNode.isEnding && (
                <div className="flex space-x-3 pt-6">
                  <Button onClick={onRestart} variant="neutral" size="large" className="flex-1">
                    Play Again
                  </Button>
                  <Button onClick={onNewStory} variant="primary" size="large" className="flex-1">
                    Try Another Story
                  </Button>
                </div>
              )}
            </div>
          </Card>
          
          <div className="text-center">
            <div className="inline-block bg-white/10 rounded-full px-4 py-2">
              <span className="text-purple-300 text-sm">
                Scene {gameHistory.length} of {Object.keys(currentStory.nodes).length}
              </span>
            </div>
          </div>
        </div>
      </div>
    );
  }
}

// ============================================================================
// MAIN WEB PLAYER APP
// ============================================================================

class WebPlayerApp extends React.Component {
  constructor(props) {
    super(props);
    
    this.state = {
      currentView: 'menu',
      stories: webStories || {}, // Stories imported from your local editor
      currentStory: null,
      currentNode: null,
      gameHistory: []
    };

    this.preventBackNavigation();
  }

  preventBackNavigation() {
    const handlePopState = (e) => {
      e.preventDefault();
      if (this.state.currentView === 'playing') {
        window.history.pushState(null, null, window.location.pathname);
      }
    };

    window.addEventListener('popstate', handlePopState);
    window.history.pushState(null, null, window.location.pathname);
  }

  handleStartStory = (storyId) => {
    const story = this.state.stories[storyId];
    if (!story) return;
    
    const startNode = story.nodes[story.startNode];
    
    this.setState({
      currentView: 'playing',
      currentStory: story,
      currentNode: startNode,
      gameHistory: [story.startNode]
    });
  }

  handleChoice = (nextNodeId) => {
    if (nextNodeId && this.state.currentStory.nodes[nextNodeId]) {
      const nextNode = this.state.currentStory.nodes[nextNodeId];
      this.setState({
        currentNode: nextNode,
        gameHistory: [...this.state.gameHistory, nextNodeId]
      });
    }
  }

  handleRestartStory = () => {
    if (this.state.currentStory) {
      const startNode = this.state.currentStory.nodes[this.state.currentStory.startNode];
      this.setState({
        currentNode: startNode,
        gameHistory: [this.state.currentStory.startNode]
      });
    }
  }

  handleExitStory = () => {
    this.setState({
      currentView: 'story-select',
      currentStory: null,
      currentNode: null,
      gameHistory: []
    });
  }

  render() {
    const { currentView, stories, currentStory, currentNode, gameHistory } = this.state;

    switch (currentView) {
      case 'menu':
        return (
          <WebMainMenuScreen 
            onPlayClick={() => this.setState({ currentView: 'story-select' })}
          />
        );

      case 'story-select':
        return (
          <WebStorySelectScreen 
            stories={stories}
            onBack={() => this.setState({ currentView: 'menu' })}
            onStorySelect={this.handleStartStory}
          />
        );

      case 'playing':
        return (
          <WebGameplayScreen 
            currentStory={currentStory}
            currentNode={currentNode}
            gameHistory={gameHistory}
            onChoice={this.handleChoice}
            onRestart={this.handleRestartStory}
            onExit={this.handleExitStory}
            onNewStory={() => this.setState({ currentView: 'story-select' })}
          />
        );

      default:
        return (
          <div className="min-h-screen bg-gradient-to-b from-purple-900 to-indigo-900 flex items-center justify-center">
            <div className="text-white text-center">
              <h2 className="text-2xl mb-4">Loading...</h2>
            </div>
          </div>
        );
    }
  }
}

export default WebPlayerApp;